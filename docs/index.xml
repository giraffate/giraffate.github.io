<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Mitaka Club</title>
        <link>https://mitaka.club</link>
        <description>三鷹で活動しているクラブチームです</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://mitaka.club/index.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Mon, 12 Oct 2020 00:00:00 +0000</lastBuildDate>
        <item>
            <title>Zolaでoutput_dirを設定で有効にできるようにした</title>
            <pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate>
            <link>https://mitaka.club/zola-output-dir/</link>
            <guid>https://mitaka.club/zola-output-dir/</guid>
            <description>&lt;h1 id=&quot;tl-dr&quot;&gt;tl;dr&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&quot;&gt;Zola&lt;&#x2F;a&gt;に&lt;code&gt;config.toml&lt;&#x2F;code&gt;で&lt;code&gt;output-dir&lt;&#x2F;code&gt;を指定できるようにした。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zola.discourse.group&#x2F;t&#x2F;output-dir-in-config-toml&#x2F;563&quot;&gt;discourse&lt;&#x2F;a&gt;に書いたことだが、Zolaではビルドしするとファイルはデフォルトで&lt;code&gt;public&lt;&#x2F;code&gt;フォルダに生成されるのだけれど、これを&lt;code&gt;zola build --output-dir docs&lt;&#x2F;code&gt;のようにフラグで生成されるフォルダを変更できる。自分はGitHub Pagesを使っていてこれは&lt;code&gt;docs&lt;&#x2F;code&gt;フォルダを使えるのだけど、毎回コマンド実行時にフォルダ指定するのはだるいので&lt;code&gt;config.toml&lt;&#x2F;code&gt;に生成先のフォルダを設定しておきたかった。&lt;a href=&quot;https:&#x2F;&#x2F;gohugo.io&#x2F;getting-started&#x2F;usage&#x2F;#the-hugo-command&quot;&gt;前に使ってたHugoだとできたし&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;&#x2F;h1&gt;
&lt;p&gt;Zolaではfeature requestするときはまずdiscourseにスレッドを立てるということだったので上述のスレッドを立てた。メンテナーからいいんじゃないのといったコメントをもらったので&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;pull&#x2F;1200&quot;&gt;PR&lt;&#x2F;a&gt;を開いた。それほど難しくもなく実装はすぐに終えることができそのままマージしてもらった。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;config.toml&lt;&#x2F;code&gt;に以下のように記載すればフラグを指定しなくても生成先のフォルダを変更できるようになる。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output_dir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;docs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;普段はissueベースでパッチを送るのだけど、自分でこの機能がほしいと言って実装したのは初めてだった。前記事でも書いたが多少完成度は低くてもこうやって使いながら不足している機能があればパッチを送って育てていくのは楽しい。&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Zolaを使う</title>
            <pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate>
            <link>https://mitaka.club/use-zola/</link>
            <guid>https://mitaka.club/use-zola/</guid>
            <description>&lt;p&gt;今まではstatic site generatorとして&lt;a href=&quot;https:&#x2F;&#x2F;gohugo.io&#x2F;&quot;&gt;Hugo&lt;&#x2F;a&gt;を使っていたが、最近はRustに熱心なので&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt;を使うことにした。軽く一つ記事を作り上げるまでやってみたが、Hugoの方がCLIコマンドもテーマも豊富で、細かいmetaタグなどもしっかりしてそうで、完成度はまあそうですねといった感じだった。ただ、最近はRustに熱心なのと完成度低い方が使って育てたくなる気持ちがわいてくるのもあって、Zolaをこのまま使うことにした。&lt;&#x2F;p&gt;
</description>
        </item>
    </channel>
</rss>
